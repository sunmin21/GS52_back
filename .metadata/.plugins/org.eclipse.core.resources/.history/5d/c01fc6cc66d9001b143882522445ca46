package com.gs52.controller.auth;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.gs52.jwt.models.ERole;
import com.gs52.jwt.models.Position;
import com.gs52.jwt.models.Rank;
import com.gs52.jwt.models.Role;
import com.gs52.jwt.models.Team;
import com.gs52.jwt.models.User;
import com.gs52.jwt.payload.request.LoginRequest;
import com.gs52.jwt.payload.request.SignupRequest;
import com.gs52.jwt.payload.response.JwtResponse;
import com.gs52.jwt.payload.response.MessageResponse;
import com.gs52.jwt.repository.RoleRepository;
import com.gs52.jwt.repository.TeamRepository;
import com.gs52.jwt.repository.PositionRepository;
import com.gs52.jwt.repository.RankRepository;
import com.gs52.jwt.repository.UserRepository;
import com.gs52.jwt.security.jwt.JwtUtils;
import com.gs52.jwt.security.services.UserDetailsImpl;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/auth")
public class AuthController {
	@Autowired(required=true)	
	private AuthenticationManager authenticationManager;

	@Autowired
	UserRepository userRepository;

	@Autowired
	RoleRepository roleRepository;

	@Autowired
	PositionRepository positionRepository;
	@Autowired
	RankRepository rankRepository;
	@Autowired
	TeamRepository teamRepository;

	@Autowired
	PasswordEncoder encoder;

	@Autowired
	JwtUtils jwtUtils;

	@PostMapping("/signin")
	public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {
			System.out.println("signin111111111111");
				// authenticataionManager.authenticate() 메소드로 검사하며 Security 내장 기능으로 수행함
		Authentication authentication = authenticationManager.authenticate(
				// UserDetailsService를 호출하는 것은 AuthTokenFilter와 동일하다 볼 수 있으며, 비밀번호 검사를 하는 추가 작업인 PasswordEncoder도 추가로 호출함
				new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));

		System.out.println("signin2222222222222");
		SecurityContextHolder.getContext().setAuthentication(authentication);
		String jwt = jwtUtils.generateJwtToken(authentication);
		
		UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();		
		List<String> roles = userDetails.getAuthorities().stream()
				.map(item -> item.getAuthority())
				.collect(Collectors.toList());

		return ResponseEntity.ok(new JwtResponse(jwt, 
												 userDetails.getId(), 
												 userDetails.getUsername(), 
												 userDetails.getEmail(), 
												 roles));
	}
	
	/*
	 	1) signUpRequest로부터 회원가입 정보를 받음.
		2) userRepository에서 Username 존재여부를 검사함(existsByUsername)
		3) 존재하지 않으면 User 객체를 신규로 생성함.
		4) 권한(Role)도 생성함.
		5) 권한이 있으면 해당 권한을 추가하고, 없으면 기본 권한을 부여함.
		6) 회원정보를 저장하고(save), 완료 메시지를 뿌려줌.
	 */

	// AuthTokenFilter가 Request로 넘어온 정보를 가지고 로그인 여부를 검사했으면,
	// Authentication Manager에서는 입력된 Request 정보가 올바른지를 검사하는 것으로 볼 수 있음
	@PostMapping("/signup")
	public ResponseEntity<?> registerUser(@Valid @RequestBody SignupRequest signUpRequest) {

		System.out.println("signup111111111111");
		if (userRepository.existsByUsername(signUpRequest.getUsername())) {
			return ResponseEntity
					.badRequest()
					.body(new MessageResponse("Error: Username is already taken!"));
		}

		System.out.println("signup22222222222");
		if (userRepository.existsByEmail(signUpRequest.getEmail())) {
			return ResponseEntity
					.badRequest()
					.body(new MessageResponse("Error: Email is already in use!"));
		}

		System.out.println("signup333333333333333333");
		System.out.println(signUpRequest.getUsername());
		System.out.println(signUpRequest.getEmail());
		System.out.println(signUpRequest.getPassword());
		System.out.println(signUpRequest.getPosition());
		// Create new user's account
		User user = new User(signUpRequest.getUsername(), 
							 signUpRequest.getEmail(),
							 encoder.encode(signUpRequest.getPassword()),
							 signUpRequest.getPosition(),
							 signUpRequest.getRank(),
							 signUpRequest.getTeam());

		System.out.println("signup444444444444");
		Set<String> strRoles = signUpRequest.getRole();
		Set<Role> roles = new HashSet<>();

		System.out.println("signup555555555555555");
		if (strRoles == null) {
			Role userRole = roleRepository.findByName(ERole.ROLE_USER)
					.orElseThrow(() -> new RuntimeException("Error: Role is not found."));
			roles.add(userRole);
			System.out.println("signup66666666");
		} else {
			strRoles.forEach(role -> {
				switch (role) {
				case "admin":
					Role adminRole = roleRepository.findByName(ERole.ROLE_ADMIN)
							.orElseThrow(() -> new RuntimeException("Error: Role is not found."));
					roles.add(adminRole);

					System.out.println("signup77777");
					break;
				case "mod":
					Role modRole = roleRepository.findByName(ERole.ROLE_MODERATOR)
							.orElseThrow(() -> new RuntimeException("Error: Role is not found."));
					roles.add(modRole);

					System.out.println("signup88888");
					break;
				default:
					Role userRole = roleRepository.findByName(ERole.ROLE_USER)
							.orElseThrow(() -> new RuntimeException("Error: Role is not found."));
					roles.add(userRole);
					System.out.println("signup999999");
				}
			});
		}

		System.out.println("signup1010101010101010");
		
//		Position userPosition = positionRepository.findById(signUpRequest.getPosition()).orElseThrow(()->new RuntimeException("error"));
//		Rank userRank = rankRepository.findById(signUpRequest.getRank()).orElseThrow(()->new RuntimeException("error"));
//		Team userTeam = teamRepository.findById(signUpRequest.getTeam()).orElseThrow(()->new RuntimeException("error"));
//		
		positionRepository.findById(signUpRequest.getPosition());
		System.out.println(positionRepository);
		
		
		//Position userPosition = PositionRepository.findAllById(signUpRequest.getPosition()).orElseThrow(() -> new RuntimeException("Error: Role is not found."));
		System.out.println(signUpRequest.getPosition().TYPE);
		System.out.println(signUpRequest.getPosition());
		
//		System.out.println(userPosition);
		
		
		user.setRoles(roles);
		System.out.println("signup11 11 11 11 ");
		System.out.println(roles.toString());
		System.out.println(user.toString());
		System.out.println(user.getId());
		userRepository.save(user);

		System.out.println("signup12 12 12 12 ");
		return ResponseEntity.ok(new MessageResponse("User registered successfully!"));
	}
}
