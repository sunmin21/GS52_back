package login;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import com.gs52.dao.manager.RegistDAO;
import com.gs52.vo.manager.RegistVO;
  
@Component
public class AuthProvider implements AuthenticationProvider  {
    
    @Autowired
    RegistDAO registDao;
    
    @Autowired
    PasswordEncoder pwdEncoder;
    
 
    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        String id = authentication.getName();
        
        RegistVO user = registDao.insertLogin();
        
        // 유저 없는경우 
        if (null == user ) {
            return null;
        }
        // 비번 불일치
        if (!pwdEncoder.matches(authentication.getCredentials().toString(), user.getEMP_PWD())) {
            throw new BadCredentialsException("Wrong password");
        }
        
        else{
        	System.out.println("로그인 성공ㅇㅇㅇㅇㅇㅇ");
        }
        List<GrantedAuthority> grantedAuthorityList = new ArrayList<>();
        
        //grantedAuthorityList.add(new SimpleGrantedAuthority(user.getAuth()));         
 
        // 로그인 성공시 로그인 사용자 정보 반환
        return new UsernamePasswordAuthenticationToken(user, null, grantedAuthorityList);
    }
    
    @Override
    public boolean supports(Class<?> authentication) {
        return authentication.equals(UsernamePasswordAuthenticationToken.class);
    }
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
 
}